voopshe ne to, ne ta zadacha daze
test 2D dlzno bit, ne 2A
ayyyyyyyyy
bliat ne pishi poka ya pishu
appsettings.json
json
Copy
Edit
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\MSSQLLocalDB;Database=Test2D;Trusted_Connection=True;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
‚öôÔ∏è Program.cs
csharp
Copy
Edit
using Microsoft.EntityFrameworkCore;
using Test2D.Data;

var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseAuthorization();
app.MapControllers();
app.Run();
üì¶ Models
Models/Player.cs
csharp
Copy
Edit
namespace Test2D.Models;

public class Player
{
    public int Id { get; set; }
    public string FirstName { get; set; } = null!;
    public string LastName { get; set; } = null!;
    public DateTime BirthDate { get; set; }

    public ICollection<Participation> Participations { get; set; }
}
Models/Match.cs
csharp
Copy
Edit
namespace Test2D.Models;

public class Match
{
    public int Id { get; set; }
    public string Map { get; set; } = null!;
    public DateTime Date { get; set; }
    public int Team1Score { get; set; }
    public int Team2Score { get; set; }

    public int TournamentId { get; set; }
    public Tournament Tournament { get; set; }
    public ICollection<Participation> Participations { get; set; }
}
Models/Tournament.cs
csharp
Copy
Edit
namespace Test2D.Models;

public class Tournament
{
    public int Id { get; set; }
    public string Name { get; set; } = null!;
    public ICollection<Match> Matches { get; set; }
}
Models/Participation.cs
csharp
Copy
Edit
namespace Test2D.Models;

public class Participation
{
    public int PlayerId { get; set; }
    public int MatchId { get; set; }
    public int MVPs { get; set; }
    public double Rating { get; set; }

    public Player Player { get; set; }
    public Match Match { get; set; }
}
üéØ DTOs
DTOs/AddPlayerDTO.cs
csharp
Copy
Edit
namespace Test2D.DTOs;

public class AddPlayerDTO
{
    public string FirstName { get; set; } = null!;
    public string LastName { get; set; } = null!;
    public DateTime BirthDate { get; set; }
    public List<MatchParticipationDTO> Matches { get; set; } = new();
}
DTOs/MatchParticipationDTO.cs
csharp
Copy
Edit
namespace Test2D.DTOs;

public class MatchParticipationDTO
{
    public int MatchId { get; set; }
    public int MVPs { get; set; }
    public double Rating { get; set; }
}
üìò Data/AppDbContext.cs
csharp
Copy
Edit
using Microsoft.EntityFrameworkCore;
using Test2D.Models;

namespace Test2D.Data;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Player> Players => Set<Player>();
    public DbSet<Match> Matches => Set<Match>();
    public DbSet<Tournament> Tournaments => Set<Tournament>();
    public DbSet<Participation> Participations => Set<Participation>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Participation>().HasKey(p => new { p.PlayerId, p.MatchId });

        modelBuilder.Entity<Participation>()
            .HasOne(p => p.Player)
            .WithMany(pl => pl.Participations)
            .HasForeignKey(p => p.PlayerId);

        modelBuilder.Entity<Participation>()
            .HasOne(p => p.Match)
            .WithMany(m => m.Participations)
            .HasForeignKey(p => p.MatchId);

        modelBuilder.Entity<Tournament>().HasData(
            new Tournament { Id = 1, Name = "CS2 Summer Cup" }
        );

        modelBuilder.Entity<Match>().HasData(
            new Match { Id = 1, Map = "Inferno", Date = new DateTime(2025, 7, 2, 15, 0, 0), Team1Score = 16, Team2Score = 12, TournamentId = 1 },
            new Match { Id = 2, Map = "Mirage", Date = new DateTime(2025, 7, 3, 18, 0, 0), Team1Score = 10, Team2Score = 16, TournamentId = 1 }
        );
    }
}
üéÆ Controller
Controllers/PlayersController.cs
csharp
Copy
Edit
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Test2D.Data;
using Test2D.DTOs;
using Test2D.Models;

namespace Test2D.Controllers;

[ApiController]
[Route("api/[controller]")]
public class PlayersController : ControllerBase
{
    private readonly AppDbContext _context;

    public PlayersController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet("{id}/matches")]
    public async Task<IActionResult> GetPlayerMatches(int id)
    {
        var player = await _context.Players
            .Include(p => p.Participations)
                .ThenInclude(p => p.Match)
                .ThenInclude(m => m.Tournament)
            .FirstOrDefaultAsync(p => p.Id == id);

        if (player == null) return NotFound();

        var response = new
        {
            playerId = player.Id,
            player.FirstName,
            player.LastName,
            player.BirthDate,
            matches = player.Participations.Select(p => new
            {
                tournament = p.Match.Tournament.Name,
                map = p.Match.Map,
                date = p.Match.Date,
                p.MVPs,
                p.Rating,
                p.Match.Team1Score,
                p.Match.Team2Score
            })
        };

        return Ok(response);
    }

    [HttpPost]
    public async Task<IActionResult> AddPlayer(AddPlayerDTO dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var matchIds = dto.Matches.Select(m => m.MatchId);
        var validMatches = await _context.Matches.Where(m => matchIds.Contains(m.Id)).Select(m => m.Id).ToListAsync();

        if (validMatches.Count != dto.Matches.Count)
            return NotFound("One or more matches not found.");

        var player = new Player
        {
            FirstName = dto.FirstName,
            LastName = dto.LastName,
            BirthDate = dto.BirthDate,
            Participations = dto.Matches.Select(m => new Participation
            {
                MatchId = m.MatchId,
                MVPs = m.MVPs,
                Rating = m.Rating
            }).ToList()
        };

        _context.Players.Add(player);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetPlayerMatches), new { id = player.Id }, null);
    }
}
‚úÖ Final Setup
Run:

pgsql
Copy
Edit
dotnet ef migrations add InitialCreate
dotnet ef database update
Open Swagger to test:

GET /api/players/1/matches

POST /api/players with body from PDF
